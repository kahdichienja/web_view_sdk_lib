// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 6.2 effective-5.10 (swiftlang-6.2.0.19.9 clang-1700.3.19.1)
// swift-module-flags: -target arm64-apple-ios26.0 -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=checked -O -enable-upcoming-feature DisableOutwardActorInference -enable-upcoming-feature InferSendableFromCaptures -enable-upcoming-feature GlobalActorIsolatedTypesUsability -enable-upcoming-feature MemberImportVisibility -enable-upcoming-feature InferIsolatedConformances -enable-upcoming-feature NonisolatedNonsendingByDefault -enable-experimental-feature DebugDescriptionMacro -enable-bare-slash-regex -module-name web_view_sdk
// swift-module-flags-ignorable:  -formal-cxx-interoperability-mode=off -interface-compiler-version 6.2
import CryptoKit
import Darwin
import Foundation
import Security
import Swift
import SwiftUI
import SystemConfiguration
import UIKit
import WebKit
import _Concurrency
import _StringProcessing
import _SwiftConcurrencyShims
import _WebKit_SwiftUI
public enum AllowedDomains {
  public static let domains: [Swift.String]
  public static func isAllowed(url: Foundation.URL) -> Swift.Bool
  public static func isAllowedHost(_ host: Swift.String) -> Swift.Bool
}
@_hasMissingDesignatedInitializers public class InternetSpeedChecker {
  public static func checkSpeed(url: Foundation.URL = URL(string: "https://www.google.com/favicon.ico")!, thresholdKbps: Swift.Double = 150.0, completion: @escaping (Swift.Bool) -> Swift.Void)
  public static func showToast(message: Swift.String, in view: UIKit.UIView, duration: Swift.Double = 2.0)
  @objc deinit
}
public struct NetworkReachability {
  public static func isHostReachable(_ host: Swift.String) -> Swift.Bool
  public static func isURLReachable(_ url: Foundation.URL) -> Swift.Bool
}
public struct RuntimeEnvironmentProtection {
  public static func isJailbroken() -> Swift.Bool
  public static func isRunningOnEmulator() -> Swift.Bool
  public static func isDebuggerAttached() -> Swift.Bool
  public static func runtimeRiskScore() -> Swift.Int
  public static func shouldBlockSDK() -> Swift.Bool
}
@objc @_Concurrency.MainActor @preconcurrency public class SecureNavigationDelegate : ObjectiveC.NSObject, WebKit.WKNavigationDelegate {
  @_Concurrency.MainActor @preconcurrency public init(allowedURL: Foundation.URL)
  @_Concurrency.MainActor @preconcurrency @objc public func webView(_ webView: WebKit.WKWebView, decidePolicyFor navigationAction: WebKit.WKNavigationAction, decisionHandler: @escaping (WebKit.WKNavigationActionPolicy) -> Swift.Void)
  @_Concurrency.MainActor @preconcurrency @objc public func webView(_ webView: WebKit.WKWebView, decidePolicyFor response: WebKit.WKNavigationResponse, decisionHandler: @escaping (WebKit.WKNavigationResponsePolicy) -> Swift.Void)
  #if compiler(>=5.3) && $NonescapableTypes
  @_Concurrency.MainActor @preconcurrency @objc public func webView(_ webView: WebKit.WKWebView, didFailProvisionalNavigation navigation: WebKit.WKNavigation!, withError error: any Swift.Error)
  #endif
  @objc deinit
}
@objc @_hasMissingDesignatedInitializers @_Concurrency.MainActor @preconcurrency final public class SecureWebViewController : UIKit.UIViewController, WebKit.WKNavigationDelegate, WebKit.WKUIDelegate {
  #if compiler(>=5.3) && $NonescapableTypes
  @_Concurrency.MainActor @preconcurrency public init(expectedPackageName: Swift.String, supportedAlternativeStores: [Swift.String] = [], isProd: Swift.Bool = true, apiKey: Swift.String, onSuccess: ((Swift.Bool) -> Swift.Void)? = nil)
  #endif
  @_Concurrency.MainActor @preconcurrency @objc override final public func loadView()
  @_Concurrency.MainActor @preconcurrency @objc final public func webView(_ webView: WebKit.WKWebView, requestMediaCapturePermissionFor origin: WebKit.WKSecurityOrigin, initiatedByFrame frame: WebKit.WKFrameInfo, type: WebKit.WKMediaCaptureType, decisionHandler: @escaping (WebKit.WKPermissionDecision) -> Swift.Void)
  @_Concurrency.MainActor @preconcurrency @objc final public func webView(_ webView: WebKit.WKWebView, decidePolicyFor navigationAction: WebKit.WKNavigationAction, decisionHandler: @escaping (WebKit.WKNavigationActionPolicy) -> Swift.Void)
  @_Concurrency.MainActor @preconcurrency @objc final public func webView(_ webView: WebKit.WKWebView, decidePolicyFor response: WebKit.WKNavigationResponse, decisionHandler: @escaping (WebKit.WKNavigationResponsePolicy) -> Swift.Void)
  @objc deinit
}
@objc @_inheritsConvenienceInitializers @IBDesignable @_Concurrency.MainActor @preconcurrency public class SecureWebViewContainer : UIKit.UIView {
  @objc @IBInspectable @_Concurrency.MainActor @preconcurrency public var urlString: Swift.String? {
    @objc get
    @objc set
  }
  @objc @IBInspectable @_Concurrency.MainActor @preconcurrency public var customCSP: Swift.String? {
    @objc get
    @objc set
  }
  @objc @IBInspectable @_Concurrency.MainActor @preconcurrency public var isProd: Swift.Bool
  @_Concurrency.MainActor @preconcurrency public var onSuccess: ((Swift.Bool) -> Swift.Void)?
  @_Concurrency.MainActor @preconcurrency @objc override dynamic public func awakeFromNib()
  @_Concurrency.MainActor @preconcurrency @objc override dynamic public func prepareForInterfaceBuilder()
  @_Concurrency.MainActor @preconcurrency @objc override dynamic public init(frame: CoreFoundation.CGRect)
  #if compiler(>=5.3) && $NonescapableTypes
  @_Concurrency.MainActor @preconcurrency @objc required dynamic public init?(coder: Foundation.NSCoder)
  #endif
  @objc deinit
}
@_hasMissingDesignatedInitializers final public class SecurityManager {
  public static let shared: web_view_sdk.SecurityManager
  final public func enforceNetworkProtection() -> Swift.Bool
  final public func secureSession() -> Foundation.URLSession
  final public func isNetworkAnomalyDetected() -> Swift.Bool
  @objc deinit
}
@_hasMissingDesignatedInitializers public class WebViewSDK {
  public static func logString(for string: Swift.String)
  public static func showWarning(_ message: Swift.String)
  @objc deinit
}
@_Concurrency.MainActor @preconcurrency public struct SecureWebView : SwiftUI.UIViewRepresentable {
  #if compiler(>=5.3) && $NonescapableTypes
  @_Concurrency.MainActor @preconcurrency public init(expectedPackageName: Swift.String, supportedAlternativeStores: [Swift.String] = [], isProd: Swift.Bool = true, apiKey: Swift.String, onSuccess: ((Swift.Bool) -> Swift.Void)? = nil)
  #endif
  @_Concurrency.MainActor @preconcurrency public func makeUIView(context: web_view_sdk.SecureWebView.Context) -> UIKit.UIView
  @_Concurrency.MainActor @preconcurrency public func updateUIView(_ uiView: UIKit.UIView, context: web_view_sdk.SecureWebView.Context)
  @_Concurrency.MainActor @preconcurrency public func makeCoordinator() -> web_view_sdk.SecureWebView.Coordinator
  @objc @_hasMissingDesignatedInitializers @_Concurrency.MainActor @preconcurrency public class Coordinator : ObjectiveC.NSObject, WebKit.WKNavigationDelegate, WebKit.WKUIDelegate {
    @_Concurrency.MainActor @preconcurrency @objc public func webView(_ webView: WebKit.WKWebView, requestMediaCapturePermissionFor origin: WebKit.WKSecurityOrigin, initiatedByFrame frame: WebKit.WKFrameInfo, type: WebKit.WKMediaCaptureType, decisionHandler: @escaping (WebKit.WKPermissionDecision) -> Swift.Void)
    @_Concurrency.MainActor @preconcurrency @objc public func webView(_ webView: WebKit.WKWebView, decidePolicyFor navigationAction: WebKit.WKNavigationAction, decisionHandler: @escaping (WebKit.WKNavigationActionPolicy) -> Swift.Void)
    @_Concurrency.MainActor @preconcurrency @objc public func webView(_ webView: WebKit.WKWebView, decidePolicyFor response: WebKit.WKNavigationResponse, decisionHandler: @escaping (WebKit.WKNavigationResponsePolicy) -> Swift.Void)
    @objc deinit
  }
  public typealias Body = Swift.Never
  public typealias UIViewType = UIKit.UIView
}
extension web_view_sdk.SecureNavigationDelegate : Swift.Sendable {}
extension web_view_sdk.SecureWebView : Swift.Sendable {}
extension web_view_sdk.SecureWebView.Coordinator : Swift.Sendable {}
